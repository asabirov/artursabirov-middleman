---
title: Workflow в распределенной разработке
announce: Как создаются проекты, когда сотрудники находятся в разных городах
alias: distributed-development
tags: git
date: 2011-12-12
---

В нашей компании, Social Quantum, несколько команд из разных городов, в сумме несколько десятков разработчиков. При этом получается стабильно разрабатывать и запускать новые проекты. Расскажу немного о том, как всё устроено.

## Инструменты

* Git;
* Система управления проектами. У нас используется [Unfuddle](http://unfuddle.com,)
но я бы не называл его удачным выбором. Можете подобрать себе по вкусу, необходимы будут тикеты, wiki и подсчет времени (estimates). И не менее полезным будет хостинг репозиториев, привязки коммитов к тикету и тикетами друг с другом (assigns);
* Skype.

## Роли

Каждый проект курирует один человек — руководитель проекта. Он занимается проектированием архитектуры, составлением и разделением задач по командам.
В каждой команде присутствует один ведущий разработчик (DevLead). В идеале руководитель не должен давать прямых указаний разработчикам. Его задача раздавать и принимать задачи в команде.
Разработчики, дизайнеры, тестеры и т.д.

## Разработка

Продемонстрирую на примере.

* Руководитель создает тикет (задачу), назовем её «Разработать систему приема платежей ВКонтакте» и направляет девлиду;
* Лид детально дополняет детали реализации, выставляет сроки (initial estimates) и отправляет задачу члену команды;
* Разработчик принимает тикет, в рабочем репозитории создает отдельную ветку (git checkout -b branchname), в качестве имени используется номер тикета;
* Во время работы разработчик отчитывается по каждому этапу в тайм-трекере. Например, «изучил API ВКонтакте — 1 час», «написал класс VKPayment — 2 час» и «написал спеки и протестировал — 3 часа»;
* Бранч отправляется в общий репозиторий (git push origin branchname), выставляет в тикете id-коммита и отправляет тикет девлиду. Если коммитов было несколько в бранче, то их склеивают (squash) в один (git rebase -i);
* Лид проверяет реализации, качество кода, тесты и общую работоспособность. В случае замечаний отправляется на доработку, либо сливает в ветку проекта (git merge). Дальше может сам закрыть тикет, либо и отправить руководителю. 

По аналогичной схеме формируются и другие задачи. Будь-то баг-фиксы или тестирование.

## Внедрение нового разработчика в команду

Разворачивается своё локальное рабочее окружение, примерно по такой инструкции:
* клонирование репозитория;
* настройка конфигов проекта;
* установка rvm, ruby, gems и других зависимостей;
* установка СУБД, создание баз и запуск миграций.

При этом время затраченное на установку также фиксируется в estimates-разработчика.

## Выкатывание релизов

Деплоем занимается руководитель проекта. Прогоняются тесты и с помощью capistrano выкладывается обновление на всех серверах. 

## Рекомендации

* Разработчикам в начале рабочего дня рекомендуется забирать последнюю версию проекта (git pull) и обновлять свою ветку (git rebase master);
* В комментарии коммита можно указывать номер тикета. Это будет полезно при изучении истории коммитов (git log);
* Крупные задачи можно разбить на несколько тикетов и раздать нескольким разработчикам;
* Весь код желательно покрывать блочными и интеграционным тестами. Они помогут держать проект в рабочем состоянии;
* Частый рефакторинг и code-review удерживают проект от загнивания.

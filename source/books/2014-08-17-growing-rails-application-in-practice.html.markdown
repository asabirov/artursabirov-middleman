---
title: Growing Rails Applications in Practice
alias: growing-rails-application-in-practice
date: 2014-08-17 19:06 MSK
tags: Разработка, Rails
book_prefix: Книги
image: growing-rails-application-in-practice.png
---

Rails проекты могут вырастать до огромных размеров. Держать код руководствуясь только соглашениями фреймворка, приводит к нагромождению кода в моделях, контроллера.
В книге даются простые и полезные советы как этого избежать, чтобы независимо от размера вашего проекта, его также легко было поддерживать, как на первых этапах.


###Организация контроллеров

   * Держите CRUD методы легкими, выносите код в отдельные методы.
   * Используйте ActiveResource для типичных CRUD контроллеров. Недостаток — добавляет магии в код.
   * Выносите код итераций по модели (условную валидацию, рассылку уведомлений и т.д) в объекты ActiveRecord::Base или ActiveType::Object. (Паттерн FormObject).



###Организация моделей

   * Используйте композицию (например, выносите методы поиска и Note в класс Note::Search).
   * Держите связанные модели под одним неймспейсом. Также контроллеры и шаблоны.
   * Если одна модель используется с разным уровнем доступа и валидацией, создавайте для каждого случая отдельные модели (User -> User::AsSignIn, User::AsAdminEdit).


###Организация шаблонов

   * Если есть директория с именем во множественном числе и единственном — объедините их.


###Организация CSS

   * Используйте БЭМ именование (блоки, элементы, модификаторы) .
   * Ведите style-guide (hologram gem умеет генерировать по комментариям).
   * Блок не должен быть связан с другими блоками.
   * Не обязательно задавать классы в компонентных тегах (table, dl, ul).
   * Используйте :before и :after, где нужен дополнительный элемент. Вместо написания дополнительного тега.
   * Используйте media-queries вместо генерации модификаторов на js.
   * Для user-generated текстов задавайте стили по-умолчанию, чтобы не приходилось добавлять классы к тегам.

###Советы по выбору gems

   * Не используйте первые мажорные версии. Переходите, когда минорная версия дойдет хотя бы до 3й (х.х.3).
   * Гемы должны быть качественным: хороший код, покрытие тестами, регулярные коммиты.

###Выбор базы данных

   * Критерии выбора: стабилен при нагрузках, свободное распространение, устойчивость при отказе железа, имеется развитый gem-адаптер (binding gem), выполняется бекап без блокировок, высокая производительность, большое коммьюнити.
   * Прежде чем добавлять новое хранилище, посмотрите, может быть уже подойдут уже используемое.

###Организация тестов

   * В первую очередь пишите юнит-тесты. Они быстрые и простые в поддержке.
   * На каждый экран должен быть хотя бы один простой интеграционный тест.
   * 100% покрытие тестами нецелесообразно, вы сами должны определить необходимый уровень.
   * Дублирование кода в тестах не всегда плохо. Важнее наглядность и гибкость к изменениям.
   * Если вы сомневаетесь писать или не писать определенный тест — напишите.
   * Перед модификацией древнего кода, покройте удачные сценарии тестами (happy paths).
